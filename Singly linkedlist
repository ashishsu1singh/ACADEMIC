#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    
    // Constructor
    Node(int data) : data(data), next(nullptr) {}
};

// Linked List class
class LinkedList {
private:
    Node* head;
    
public:
    // Constructor
    LinkedList() : head(nullptr) {}
    
    // Destructor to free memory
    ~LinkedList() {
        Node* current = head;
        Node* nextNode;
        while (current != nullptr) {
            nextNode = current->next;
            delete current;
            current = nextNode;
        }
    }
    
    // Function to insert a node at the beginning
    void push(int new_data) {
        Node* new_node = new Node(new_data);
        new_node->next = head;
        head = new_node;
    }
    
    // Function to insert a node after a given node
    void insertAfter(Node* prev_node, int new_data) {
        if (prev_node == nullptr) {
            cout << "The given previous node cannot be NULL" << endl;
            return;
        }
        Node* new_node = new Node(new_data);
        new_node->next = prev_node->next;
        prev_node->next = new_node;
    }
    
    // Function to append a node at the end
    void append(int new_data) {
        Node* new_node = new Node(new_data);
        if (head == nullptr) {
            head = new_node;
            return;
        }
        Node* last = head;
        while (last->next != nullptr) {
            last = last->next;
        }
        last->next = new_node;
    }
    
    // Function to delete a node by key
    void deleteNode(int key) {
        Node* temp = head;
        Node* prev = nullptr;
        if (temp != nullptr && temp->data == key) {
            head = temp->next;
            delete temp;
            return;
        }
        while (temp != nullptr && temp->data != key) {
            prev = temp;
            temp = temp->next;
        }
        if (temp == nullptr) return;
        prev->next = temp->next;
        delete temp;
    }
    
    // Function to print the linked list
    void printList() {
        Node* node = head;
        while (node != nullptr) {
            cout << node->data << " ";
            node = node->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    
    list.append(6);
    list.push(7);
    list.push(1);
    list.append(4);
    list.insertAfter(list.head->next, 8);
    
    cout << "Created Linked list is: ";
    list.printList();
    
    list.deleteNode(1);
    cout << "Linked list after deletion of 1: ";
    list.printList();
    
    return 0;
}
