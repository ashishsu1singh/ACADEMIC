#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item {
    int value, weight;

    // Constructor
    Item(int value, int weight) : value(value), weight(weight) {}
};

// Comparison function to sort items by value-to-weight ratio
bool compare(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

// Function to get the maximum value in the knapsack
double fractionalKnapsack(int W, vector<Item> items, int n) {
    // Sort items by value-to-weight ratio
    sort(items.begin(), items.end(), compare);

    int currentWeight = 0;
    double finalValue = 0.0;

    // Loop through all items
    for (int i = 0; i < n; i++) {
        // If adding the current item doesn't exceed capacity
        if (currentWeight + items[i].weight <= W) {
            currentWeight += items[i].weight;
            finalValue += items[i].value;
        }
        // If we can't add the whole item, add the fractional part
        else {
            int remain = W - currentWeight;
            finalValue += items[i].value * ((double)remain / items[i].weight);
            break;
        }
    }

    return finalValue;
}

int main() {
    int W = 50; // Capacity of knapsack
    vector<Item> items = {{60, 10}, {100, 20}, {120, 30}}; // Items (value, weight)

    int n = items.size();
    cout << "Maximum value we can obtain = " << fractionalKnapsack(W, items, n) << endl;

    return 0;
}
